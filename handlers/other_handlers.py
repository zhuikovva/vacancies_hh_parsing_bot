from aiogram.types import Message
from aiogram import F, Router
from lexicon.lexicon import LEXICON_RU
from database.database import Database
from services.hh_parser import fetch_hh_ids, fetch_vacancy, process_vacancy

import aiohttp
import logging

logger = logging.getLogger(__name__)


router = Router()

@router.message(F.text.lower().startswith('–Ω–∞—á–∞—Ç—å'))
async def start_parsing(message: Message, db: Database):
    await message.answer(text=LEXICON_RU['–Ω–∞—á–∞—Ç—å'])
    try:
        last_published = await db.get_last_published_time()
        logging.info(f"[FETCH] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å {last_published}")
        
        async with aiohttp.ClientSession() as session:
            new_ids = await fetch_hh_ids(session, date_from=last_published)
            
            existing_ids = await db.get_existing_ids()
            ids_to_process = [id for id in new_ids if id not in existing_ids]

            vacancies_to_send = []
            for vac_id in ids_to_process:
                try:
                    raw_vacancy = await fetch_vacancy(session, vac_id)
                    processed = process_vacancy(raw_vacancy)
                    await db.insert_vacancy(processed)
                    vacancies_to_send.append(processed)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å ID {vac_id}: {e}", exc_info=True)
                    continue
            

            if vacancies_to_send:
                await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(ids_to_process)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!")
                response_parts = []
                for vacancy in vacancies_to_send:
                    salary_info = ""
                    if vacancy.get("salary_from"):
                        salary_info = f"üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_from']} ‚Äì {vacancy['salary_to'] or '?'}"
                    else:
                        salary_info = f"üí∏ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['predicted_salary']}"

                    response_parts.append(
                                f"üî• <b>{vacancy['vacancy_name']}</b>\n"
                                f"üè¢ {vacancy.get('employer', '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                                f"üìç {vacancy.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                                f"{salary_info}\n"
                                f"üéØ –ì—Ä–µ–π–¥: {vacancy.get('grade', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
                                f"üîó <a href='{vacancy.get('url', '#')}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
                            )

                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 5 –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for i in range(0, len(response_parts), 5):
                    await message.answer('\n\n'.join(response_parts[i:i+5]), parse_mode='HTML')
            else:
                await message.answer("–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

@router.message(F.text.lower().startswith('–¥–∞'))
async def process_yes_answer(message: Message, db: Database):

    try:
        vacancies = await db.get_recent_vacancies()
    
        if not vacancies:
            await message.answer('–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        response= []
        for vacancy in vacancies:
            salary_info = ""
            if vacancy.get("salary_from"):
                salary_info = f"üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary_from']} ‚Äì {vacancy['salary_to'] or '?'}"
            else:
                salary_info = f"üí∏ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['predicted_salary']}"
            response.append( 
                        f"üî• <b>{vacancy['vacancy_name']}</b>\n"
                                f"üè¢ {vacancy.get('employer', '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                                f"üìç {vacancy.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                                f"{salary_info}\n"
                                f"üéØ –ì—Ä–µ–π–¥: {vacancy.get('grade', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
                                f"üîó <a href='{vacancy.get('url', '#')}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
            )
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 5 –≤–∞–∫–∞–Ω—Å–∏–π
        for i in range(0, len(response), 5):
            await message.answer('\n'.join(response[i:i+5]), parse_mode='HTML')

    except Exception as e:
       logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}", exc_info=True)


@router.message(F.text.lower().startswith('–Ω–µ—Ç'))
async def process_no_answer(message: Message):
    await message.answer(text=LEXICON_RU['–Ω–µ—Ç'])

# –µ—Å–ª–∏ –Ω–µ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, —Ç–æ –≤—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ another
@router.message()
async def process_another_answer(message: Message):
    await message.answer(text=LEXICON_RU['another'])
